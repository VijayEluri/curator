#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")
package org.cggh.chassis.wwarn.ui.curator.client;

import java.util.HashMap;
import java.util.Map;

import org.cggh.chassis.generic.async.client.Deferred;
import org.cggh.chassis.generic.async.client.Function;
import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;
import org.cggh.chassis.generic.miniatom.client.AtomHelper;

import org.cggh.chassis.generic.widget.client.AsyncWidgetModel;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.Status;
import org.cggh.chassis.generic.widget.client.ChassisWidget;
import org.cggh.chassis.generic.widget.client.DelegatingWidget;
import org.cggh.chassis.generic.widget.client.MapMemory;
import org.cggh.chassis.generic.widget.client.ObservableProperty;
import org.cggh.chassis.generic.widget.client.WidgetMemory;



#if($melati.Object.AllEvents.size() > 0) #begin

import org.cggh.chassis.generic.widget.client.WidgetEvent;
import org.cggh.chassis.generic.widget.client.WidgetEventHandler;
import org.cggh.chassis.generic.widget.client.WidgetEventChannel;


#end

#set $includeDocument = 0
#set $includeElement = 0
#foreach $property in $melati.Object.Properties #begin
    #if($property.Type.equals("Element")) #begin #set $includeElement = 1 #end
    #if($property.Type.equals("Document")) #begin #set $includeDocument = 1 #end
#end
#if ($includeDocument) #begin

import com.google.gwt.xml.client.Document;
#end
#if ($includeElement) #begin

import com.google.gwt.xml.client.Element;
#end

import com.google.gwt.http.client.URL;

/**
 * BE SURE TO EDIT THE TEMPLATE NOT THE RENDERED RESULT
 *
 * DELETE_TO_MANUALLY_EDIT
 *
 * @author timp
 *
 */
public class $(melati.Object.Name)Widget 
		extends DelegatingWidget<$(melati.Object.Name)WidgetModel, $(melati.Object.Name)WidgetRenderer> {

	private static final Log log = LogFactory.getLog($(melati.Object.Name)Widget.class);
	

	private $(melati.Object.Name)WidgetController controller;

#foreach $property in $melati.Object.Properties #begin

	public final ObservableProperty<$property.Type> $property.Name = new ObservableProperty<$property.Type>();
#end

#if ($melati.Object.Requests.size() > 0) #begin
	public final ObservableProperty<Status> status = new ObservableProperty<Status>();
#end

	public final ObservableProperty<String> message = new ObservableProperty<String>();


#foreach $event in $melati.Object.AllEvents #begin
	public final WidgetEventChannel $u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel = new WidgetEventChannel(this);
#end



##foreach $kid in $melati.Object.ChildWidgets #begin
##
##	// public so as to be available to renderer 
##	public $(kid.Name)Widget $u.uncapitalised($kid.Name)Widget;
##
##end

	@Override
	protected $(melati.Object.Name)WidgetModel createModel() {
		return new $(melati.Object.Name)WidgetModel();
	}

#foreach $property in $melati.Object.Properties #begin
	public $property.Type get$u.capitalised($property.Name)() { 
		return model.$(property.Name).get();
	} 
	public void set$u.capitalised($property.Name)($property.Type $property.Name) {
		model.$(property.Name).set($property.Name);
	}
	
#end

	@Override
	protected $(melati.Object.Name)WidgetRenderer createRenderer() {
		return new $(melati.Object.Name)WidgetRenderer(this);
	}

	// Using init() rather than constructor because reset() uses init().
	public void init() {

		super.init();

		this.controller = new $(melati.Object.Name)WidgetController(this, this.model);

		this.memory = new Memory();

	}
	
	@Override
	public void refresh() {
		log.enter("refresh");
		
#foreach $property in $melati.Object.Properties #begin
#if ($property.Type.equals("Element") #begin

		this.controller.retrieve$u.capitalised($property.Name)();
#end
#end

#foreach $kid in $melati.Object.ChildWidgets #begin

		renderer.$u.uncapitalised($kid.Name)WidgetUiField.refresh();

#end
		log.leave();
	}
	

	@Override
	public Deferred<ChassisWidget> refreshAndCallback() {
		
		log.enter("refreshAndCallback");
		
		Deferred<ChassisWidget> deferredSelf = this.controller.refreshAndCallback();
		
		log.leave();
		return deferredSelf;
	}
	

#if ($includeElement == 0) #begin 
	private class Memory extends MapMemory {

		@Override
		public Map<String, String> createMnemonicMap() {
			log.enter("createMnemonicMap");
			
			Map<String, String> map = new HashMap<String, String>();

			log.leave();
			return map;
		}

		@Override
		public Deferred<WidgetMemory> remember(Map<String, String> mnemonic) {
			log.enter("remember");
			
			log.debug("call back immediately");
			final Deferred<WidgetMemory> deferredMemory = new Deferred<WidgetMemory>();
			deferredMemory.callback(this);
		
			log.leave();
			return deferredMemory;
		}


	}
#end #else #begin 
	
	private class Memory extends MapMemory {

		private static final String KEY = "studyUrl";


		@Override
		public Map<String, String> createMnemonicMap() {
			log.enter("createMnemonicMap");
			
			Map<String, String> map = new HashMap<String, String>();

			Element studyEntry = model.studyEntry.get();
			
			String url = null;
			
			if (studyEntry != null) { 
				
				url = AtomHelper.getEditLinkHrefAttr(studyEntry);
			
				if (url != null) {					
					map.put(KEY, URL.encodeComponent(url));
				}
				
			}
			
			log.leave();
			return map;
		}

		
		@Override
		public Deferred<WidgetMemory> remember(Map<String, String> mnemonic) {
			log.enter("remember");
			
			final Deferred<WidgetMemory> deferredMemory;
			
			model.status.set(AsyncWidgetModel.STATUS_INITIAL);
			
			String url = URL.decodeComponent(mnemonic.get(KEY));
			log.debug("found url: " + url);
			
			if (url != null) {
				
				log.debug("set url to:" + url);

				model.studyUrl.set(url);
				
				deferredMemory = refreshAndCallback().adapt(new Function<ChassisWidget, WidgetMemory>() {

					public WidgetMemory apply(ChassisWidget in) {
						log.debug("call back returning this memory");
						return Memory.this;
					}
					
				});

			}
			
			else {
				
				log.debug("call back immediately");
				deferredMemory = new Deferred<WidgetMemory>();
				deferredMemory.callback(this);
				
			}
			
			log.leave();
			return deferredMemory;
		}


	}

#end

	
}
