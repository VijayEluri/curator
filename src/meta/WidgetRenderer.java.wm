#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")
package org.cggh.chassis.wwarn.ui.curator.client;

import java.util.List;

import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;

import org.cggh.chassis.generic.miniatom.client.AtomHelper;
import org.cggh.chassis.generic.miniatom.client.ext.ChassisHelper;

import org.cggh.chassis.generic.widget.client.AsyncWidgetModel;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.Status;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.StatusChangeEvent;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.StatusChangeHandler;
import org.cggh.chassis.generic.widget.client.ChassisWidgetRenderer;
import org.cggh.chassis.generic.widget.client.PropertyChangeEvent;
import org.cggh.chassis.generic.widget.client.PropertyChangeHandler;
import org.cggh.chassis.generic.widget.client.WidgetEvent;
import org.cggh.chassis.generic.widget.client.WidgetEventHandler;


import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.uibinder.client.UiTemplate;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextArea;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.xml.client.Document;
import com.google.gwt.xml.client.Element;

/**
 * BE SURE TO EDIT THE TEMPLATE NOT THE RENDERED RESULT
 *
 * DELETE_TO_MANUALLY_EDIT
 *
 * @author timp
 */
public class $(melati.Object.Name)WidgetRenderer extends
		ChassisWidgetRenderer<$(melati.Object.Name)WidgetModel> {

	private Log log = LogFactory.getLog($(melati.Object.Name)WidgetRenderer.class);
	
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
#foreach $kid in $melati.Object.ChildWidgets #begin
	$(kid.Name)Widget $u.uncapitalised($kid.Name)Widget;

#end
#end


	@UiTemplate("$(melati.Object.Name)Widget.ui.xml")
	interface $(melati.Object.Name)WidgetRendererUiBinder extends
			UiBinder<HTMLPanel, $(melati.Object.Name)WidgetRenderer> {
	}
	private static $(melati.Object.Name)WidgetRendererUiBinder uiBinder = 
		GWT.create($(melati.Object.Name)WidgetRendererUiBinder.class);


	@UiField HTMLPanel mainPanel;
	@UiField HTMLPanel contentPanel;
#if ($melati.Object.Requests.size() > 0) #begin

	@UiField HTMLPanel pendingPanel;
#end

	@UiField HTMLPanel errorPanel;
	@UiField FlowPanel errorMessage;

#foreach $kid in $melati.Object.ChildWidgets #begin

	@UiField $(kid.Name)Widget $u.uncapitalised($kid.Name)WidgetUiField;
#end




	private $(melati.Object.Name)Widget owner;
	
	public $(melati.Object.Name)WidgetRenderer($(melati.Object.Name)Widget owner) {
		this.owner = owner;
	}


#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	private $(melati.Object.Name)WidgetController controller;

	public void setController($(melati.Object.Name)WidgetController controller) {
		this.controller = controller;
	}
#end


##start

	@Override
	protected void registerHandlersForModelChanges() {

	
#if($melati.Object.Requests.size() > 0) #begin
		this.modelChangeHandlerRegistrations.add(model.status.addChangeHandler(new PropertyChangeHandler<Status>() {
			public void onChange(PropertyChangeEvent<Status> e) {
				log.enter("onChange<Status>");		
				syncUIWithStatus(e.getAfter());
				log.leave();
			}
		}));
#end

		this.modelChangeHandlerRegistrations.add(model.message.addChangeHandler(new PropertyChangeHandler<String>() {
			public void onChange(PropertyChangeEvent<String> e) {
				log.enter("onChange<String>");		
				syncUIWithMessage(e.getAfter());
				log.leave();
			}
		}));


#foreach $property in $melati.Object.Properties #begin
	
		this.modelChangeHandlerRegistrations.add(model.$(property.Name).addChangeHandler(new PropertyChangeHandler<$property.Type>() {
			public void onChange(PropertyChangeEvent<$property.Type> e) {
				log.enter("onchange($(property.Name))");
				syncUIWith$u.capitalised($(property.Name))(e.getAfter());
				log.leave();
			}
		}));

#end

	}
	
	
	@Override
	protected void registerHandlersForChildWidgetEvents() {
		log.enter("registerHandlersForChildWidgetEvents");
		
#foreach $kid in $melati.Object.ChildWidgets #begin
  #foreach $event in $kid.Events #begin
		this.childWidgetEventHandlerRegistrations.add(
				$u.uncapitalised($kid.Name)WidgetUiField.$u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel.addHandler(new WidgetEventHandler() {
			public void onEvent(WidgetEvent e) {
				log.enter("onEvent($u.uncapitalised($kid.Name)WidgetUiField.$u.uncapitalised($event.Widget.Name)$(event.Name))");
				owner.$u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel.fireEvent(e);
				log.leave();
			}
		}));
  #end
#end
		
		log.leave();
	}



	@Override
	protected void renderUI() {

		this.canvas.clear();
		this.canvas.add(uiBinder.createAndBindUi(this));
		
#if($melati.Object.Requests.size() > 0) #begin
		pendingPanel.setVisible(true);	
#end		
	}
	

	@Override
	protected void bindUI($(melati.Object.Name)WidgetModel model) {
		super.bindUI(model);
		errorPanel.setVisible(false);	
	}

#if($melati.Object.Requests.size() > 0) #begin

	@Override
	protected void syncUI() {
		syncUIWithStatus(model.status.get());
	}

	protected void syncUIWithStatus(Status status) {
		log.enter("syncUIWithStatus");		
		
		errorPanel.setVisible(false);	
		if (status == null) {
			// null before being set
			log.debug("Called with null status");
		}
		else if (status instanceof AsyncWidgetModel.InitialStatus) {
			pendingPanel.setVisible(true);	
		}
		
		//TODO Widget specific statii
		
		else if (status instanceof AsyncWidgetModel.ReadyStatus) {
			pendingPanel.setVisible(false);	
		}			
		else if (status instanceof AsyncWidgetModel.ErrorStatus) {
			model.message.set("Error status given on asynchronous call.");
		}			
		else {
			model.message.set("Unhandled status:" + status);
		}

		log.leave();
	}

#end

	protected void syncUIWithMessage(String message) {
		log.enter("syncUIWithMessage");

		if (message != null) {

#if($melati.Object.Requests.size() > 0) #begin
			pendingPanel.setVisible(false);	
#end
			contentPanel.setVisible(false);
			errorMessage.clear();
			errorMessage.add(new HTML(message));
			errorPanel.setVisible(true);
		}

		log.leave();
	}


#foreach $property in $melati.Object.Properties #begin
	
	protected void syncUIWith$u.capitalised($(property.Name))($(property.Type) $(property.Name)) {
		log.enter("syncUIWith$u.capitalised($(property.Name))");
		// TODO needs to be a method in an extension
		log.leave();
	}

#end

}

