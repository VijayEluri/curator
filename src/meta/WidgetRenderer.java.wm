#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")
package org.cggh.chassis.wwarn.ui.curator.client;

import static org.cggh.chassis.generic.widget.client.HtmlElements.strongWidget;

import java.util.ArrayList;
import java.util.List;

import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;
import org.cggh.chassis.generic.miniatom.client.AtomHelper;
import org.cggh.chassis.generic.miniatom.client.ext.ChassisHelper;
import org.cggh.chassis.wwarn.ui.common.client.RenderUtils;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Widget;


#set $includeDocument = 0
#set $includeElement = 0
#foreach $property in $melati.Object.Properties #begin
    #if($property.Type.equals("Element")) #begin #set $includeElement = 1 #end
    #if($property.Type.equals("Document")) #begin #set $includeDocument = 1 #end
#end
#if ($includeDocument != 0) #begin

import com.google.gwt.xml.client.Document;
import com.google.gwt.xml.client.Element;
#end #else #begin 
  #if ($includeElement != 0) #begin

import com.google.gwt.xml.client.Element;
  #end
#end


/**
 * BE SURE TO EDIT THE TEMPLATE NOT THE RENDERED RESULT
 *
 * DELETE_TO_MANUALLY_EDIT
 *
 * @author timp
 */
public class $(melati.Object.Name)WidgetRenderer extends
		$(melati.Object.Name)WidgetRendererBase {

	private Log log = LogFactory.getLog($(melati.Object.Name)WidgetRenderer.class);
	
	public $(melati.Object.Name)WidgetRenderer($(melati.Object.Name)Widget owner) {
		this.owner = owner;
	}


	FlexTable render$u.capitalised($property.Name)($(property.Type) $(property.Name)) {
		log.enter("render$u.capitalised($property.Name)");
		List<List<Widget>> rows = new ArrayList<List<Widget>>();
		
		ArrayList<Widget> headerRow = new ArrayList<Widget>();
		headerRow.add(strongWidget("Title"));		// i18n
#if ($property.Type.equals("Document") || $property.Type.equals("Element")) #begin

		headerRow.add(strongWidget("Authors"));  	// i18n

 #foreach $event in $melati.Object.Events #begin
		
		headerRow.add(strongWidget("$event.Name"));     // i18n
 #end
		rows.add(headerRow);

 #if ($property.Type.equals("Document")) #begin

		for (final Element entry : AtomHelper.getEntries($(property.Name).getDocumentElement())) { 
 #end #else #begin
		{ 
			Element entry = $(property.Name);

 #end 

			ArrayList<Widget> row = new ArrayList<Widget>();

			row.add(new HTML(ChassisHelper.getTitle(entry)));
			row.add(new HTML(RenderUtils.join(ChassisHelper.getAuthorEmails(entry), ", ")));

 #foreach $event in $melati.Object.Events #begin
		
			Anchor $u.uncapitalised($(event.Name))Link = new Anchor("$event.Name"); // i18n
			
			$u.uncapitalised($(event.Name))Link.addClickHandler(new ClickHandler() {
				
				public void onClick(ClickEvent e) {
					
					log.enter("onClick");
					
					log.debug("Firing event...");
					
					$(event.Name)Event $u.uncapitalised($(event.Name))Event  = new $(event.Name)Event();
  #if ($property.Name.endsWith("Feed")) #begin
   #set $entryHolder = $u.capitalised($property.Name.replace("Feed","Entry"))
  #end #else #begin
   #set $entryHolder = $u.capitalised($property.Name);
  #end
				
					$u.uncapitalised($(event.Name))Event.set$(entryHolder)(entry);
					
					owner.$u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel.fireEvent($u.uncapitalised($(event.Name))Event);
					
					log.leave();
				}

			});

			row.add($u.uncapitalised($(event.Name))Link);
	
 #end			

			rows.add(row);
		} 
 #if ($property.Type.equals("Document")) #begin

		FlexTable t = RenderUtils.renderResultsTable(rows);
 #end #else #begin

		FlexTable t = RenderUtils.renderFirstRowHeadingResultsAsFirstColumnHeadingTable(rows);
 #end
#end #else #begin

		rows.add(headerRow);

		ArrayList<Widget> row = new ArrayList<Widget>();
		row.add(new HTML($(property.Name)));

		rows.add(row);

		FlexTable t = RenderUtils.renderFirstRowHeadingResultsAsFirstColumnHeadingTable(rows);
#end

		log.leave();
		return t;
	}

}

