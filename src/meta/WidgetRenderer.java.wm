#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")
package org.cggh.chassis.wwarn.ui.curator.client;

import java.util.List;

import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;
import org.cggh.chassis.generic.miniatom.client.AtomHelper;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel;
import org.cggh.chassis.generic.widget.client.ChassisWidgetRenderer;
import org.cggh.chassis.generic.widget.client.PropertyChangeEvent;
import org.cggh.chassis.generic.widget.client.PropertyChangeHandler;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.Status;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.StatusChangeEvent;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.StatusChangeHandler;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.uibinder.client.UiTemplate;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.TextArea;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.xml.client.Document;
import com.google.gwt.xml.client.Element;

/**
 * @author timp
 * @since 13 Jan 2010
 */
public class $(melati.Object.Name)WidgetRenderer extends
		ChassisWidgetRenderer<$(melati.Object.Name)WidgetModel> {

	private Log log = LogFactory.getLog($(melati.Object.Name)WidgetRenderer.class);
	
	@UiTemplate("$(melati.Object.Name)Widget.ui.xml")
	interface $(melati.Object.Name)WidgetRendererUiBinder extends
			UiBinder<HTMLPanel, $(melati.Object.Name)WidgetRenderer> {
	}
	private static $(melati.Object.Name)WidgetRendererUiBinder uiBinder = 
		GWT.create($(melati.Object.Name)WidgetRendererUiBinder.class);

	@UiField HTMLPanel bodyPanel;
	@UiField FlowPanel mainActionsPanel;
	@UiField HTMLPanel pendingPanel;
  @UiField HTMLPanel selectExistingStudyPanel;
  @UiField ListBox studySelect;
	@UiField HTMLPanel createStudyInteractionPanel;
	@UiField HTMLPanel errorPanel;
	@UiField FlowPanel errorMessage;
	@UiField Button proceedWithSelectedButton;
	
	@UiField TextBox studyTitle;
	@UiField TextArea otherSubmitters;
	
	@UiField Button createAndProceedButton;


	private $(melati.Object.Name)Widget owner;
	private $(melati.Object.Name)WidgetController controller;

	public $(melati.Object.Name)WidgetRenderer($(melati.Object.Name)Widget owner) {
		this.owner = owner;
	}

	public void setController($(melati.Object.Name)WidgetController controller) {
		this.controller = controller;
	}

	@Override
	protected void renderUI() {

		this.canvas.clear();
		this.canvas.add(uiBinder.createAndBindUi(this));
		
	}
	
	@Override
	protected void registerHandlersForModelChanges() {
		
		model.addStatusChangeHandler(new StatusChangeHandler() {
			public void onStatusChanged(StatusChangeEvent e) {
				syncUIWithStatus(e.getAfter());
			}
		});
		
		model.studyFeed.addChangeHandler(new PropertyChangeHandler<Document>() {
			public void onChange(PropertyChangeEvent<Document> e) {
				syncUiWithStudyFeedDoc(e.getAfter());
			}
		});
	}

	@Override
	protected void syncUI() {
		syncUIWithStatus(model.getStatus());
		syncUiWithStudyFeedDoc(model.getStudyFeedDoc());
	}

	protected void syncUIWithStatus(Status status) {

		log.enter("syncUIWithStatus");		
		
		// Hide everything (that is made visible here) first, then show as required.
		pendingPanel.setVisible(false);
		errorPanel.setVisible(false);
		
		if (status instanceof AsyncWidgetModel.InitialStatus) {
			
		}
		else if (status instanceof $(melati.Object.Name)WidgetModel.RetrieveFeedPendingStatus) {
			pendingPanel.setVisible(true);
		} 
		else if (status instanceof $(melati.Object.Name)WidgetModel.StudiesRetrievedStatus) {
			
			
		}
		else if (status instanceof $(melati.Object.Name)WidgetModel.CreateEntryPendingStatus) {
			pendingPanel.setVisible(true);
		}
		else if (status instanceof $(melati.Object.Name)WidgetModel.StudyCreatedStatus) {
			
			
		}
		else if (status instanceof AsyncWidgetModel.ErrorStatus) {
			
			error("Error status: " + status + " " + model.message);
			errorPanel.setVisible(true);
		}
		else { 
			error("Unexpected status: " + status);
			errorPanel.setVisible(true);
		}
		log.leave();
	}
	
	/** Clear and re-initialise, setting selected id. 
	 * @param studyFeedDoc */
	void syncUiWithStudyFeedDoc(Document studyFeedDoc) {
		
		log.enter("syncUiWithStudyFeedDoc");
		
		// Turn everything off (that is made visible/enabled here) first, then show/enable as required.
		selectExistingStudyPanel.setVisible(false);
		proceedWithSelectedButton.setEnabled(false);
		
		studySelect.clear();
		
		if (studyFeedDoc != null) {
			
			List<Element>  studyEntries = AtomHelper.getEntries(studyFeedDoc.getDocumentElement());
			
			if (!studyEntries.isEmpty()) {
				
				studySelect.addItem("Please select an existing Study", null);
				
				int index = 1, selectedIndex = 0;
				
				for (Element element : studyEntries) {
					
					String id = AtomHelper.getId(element);
					
					log.debug("id:"+id);
					
					studySelect.addItem(AtomHelper.getTitle(element), id);
					
					if(model.getSelectedStudyId() != null && model.getSelectedStudyId().equals(id)) {
						
						selectedIndex = index;
						
						// Automatic selection.
						// Note that the manual selection event is handled by handleStudySelection()
						log.debug("Enabling the proceed button because a study was selected previously.");
						proceedWithSelectedButton.setEnabled(true);
					}
					index++;
				}
				
				log.debug("selectedIndex" + selectedIndex);
				
				studySelect.setItemSelected(selectedIndex, true);
				selectExistingStudyPanel.setVisible(true);
				
			}
		}
		
		log.leave();
	}
	
	
	@Override
	public void registerHandlersForChildWidgetEvents() {
		
		ChangeHandler studySelectedChangeHandler = new ChangeHandler() {

			public void onChange(ChangeEvent event) {
			}

		};
		
		studySelect.addChangeHandler(studySelectedChangeHandler);
		
	}

	public void error(String err) {

		errorMessage.clear();
		errorMessage.add(new HTML(err));
	}
	
	
}

