#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")
/**
 * 
 */
package org.cggh.chassis.wwarn.ui.curator.client;

import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin

import org.cggh.chassis.generic.widget.client.DelegatingWidget;

#end 

#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin
import org.cggh.chassis.generic.widget.client.ChassisWidget;

import com.google.gwt.core.client.GWT;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiTemplate;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTMLPanel;

#end 


#if($melati.Object.ExtendedFrom.equals("MultiWidget")) #begin
import org.cggh.chassis.generic.widget.client.MultiWidget;

#end 
import org.cggh.chassis.generic.widget.client.WidgetEventChannel;


/**
 * BE SURE TO EDIT THE TEMPLATE NOT THE RENDERED RESULT
 *
 * DELETE_TO_MANUALLY_EDIT
 *
 * @author timp
 *
 */
public class $(melati.Object.Name)Widget 
	 
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	extends DelegatingWidget<$(melati.Object.Name)WidgetModel, $(melati.Object.Name)WidgetRenderer> {
#end 
#if($melati.Object.ExtendedFrom.equals("MultiWidget")) #begin
	extends MultiWidget {
#end 
#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin
	extends ChassisWidget {
#end  

	private static final Log log = LogFactory.getLog($(melati.Object.Name)Widget.class);
	

#foreach $kid in $melati.Object.ChildWidgets #begin
  #foreach $event in $kid.Events #begin

	public final WidgetEventChannel $u.uncapitalised($kid.Name)$(event.Name)EventChannel = new WidgetEventChannel(this);
	
 #end
#end
#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin

	@UiTemplate("$(melati.Object.Name)Widget.ui.xml")
	interface $(melati.Object.Name)WidgetRendererUiBinder extends
			UiBinder<HTMLPanel, $(melati.Object.Name)Widget> {
	}
	private static $(melati.Object.Name)WidgetRendererUiBinder uiBinder = 
		GWT.create($(melati.Object.Name)WidgetRendererUiBinder.class);

	@UiField HTMLPanel mainPanel;
	@UiField HTMLPanel contentPanel;
	@UiField HTMLPanel pendingPanel;
	@UiField HTMLPanel errorPanel;
	@UiField FlowPanel errorMessage;

#foreach $kid in $melati.Object.ChildWidgets #begin

    @UiField $(kid.Name)Widget $u.uncapitalised($kid.Name)WidgetUiField;

#end


	@Override
	protected void renderUI() {

		log.enter("renderUI");
		
		this.add(uiBinder.createAndBindUi(this));
		

		log.leave();
	}


	@Override
	protected void bindUI() {
		super.bindUI();
#foreach $kid in $melati.Object.ChildWidgets #begin
  #foreach $event in $kid.Events #begin
	public final WidgetEventChannel $u.uncapitalised($kid.Name)$(event.Name)EventChannel = new WidgetEventChannel(this);
		this.childWidgetEventHandlerRegistrations.add(
				$u.uncapitalised($kid.Name)WidgetUiField.$u.uncapitalised($kid.Name)$(event.Name)EventChannel.addHandler(new WidgetEventHandler() {
			public void onEvent(WidgetEvent e) {
				log.enter("onEvent($u.uncapitalised($kid.Name))");
				$u.uncapitalised($kid.Name)$(event.Name)EventChannel.fireEvent(e);
				log.leave();
			}
		}));
#end
#end
		
}



#end
	
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	private $(melati.Object.Name)WidgetController controller;
#end



#foreach $kid in $melati.Object.ChildWidgets #begin

	public $(kid.Name)Widget $u.uncapitalised($kid.Name)Widget;

#end

#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	@Override
	protected $(melati.Object.Name)WidgetModel createModel() {
		return new $(melati.Object.Name)WidgetModel();
	}

	public $(melati.Object.Name)WidgetModel getModel() {
		return model;
	}

	@Override
	protected $(melati.Object.Name)WidgetRenderer createRenderer() {
		return new $(melati.Object.Name)WidgetRenderer(this);
	}
#end	

	// Using init() rather than constructor because reset() uses init().
	public void init() {
		
		super.init();
		
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin

		this.controller = new $(melati.Object.Name)WidgetController(this, this.model);
		this.renderer.setController(controller);
#end

	}
	
	@Override
	public void refresh() {
		log.enter("refresh");
		// TODO get data 
		log.leave();	
	}
	
	
#foreach $event in $melati.Object.Events #begin

	public final WidgetEventChannel $u.uncapitalised($melati.Object.Name)$(event.Name)EventChannel = new WidgetEventChannel(this);

#end

	
	

	

}
