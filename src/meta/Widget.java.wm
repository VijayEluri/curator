#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")
package org.cggh.chassis.wwarn.ui.curator.client;

import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin

import org.cggh.chassis.generic.widget.client.DelegatingWidget;
import org.cggh.chassis.generic.widget.client.ObservableProperty;

#end 

import org.cggh.chassis.generic.widget.client.AsyncWidgetModel.Status;

#if(!$melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
import org.cggh.chassis.generic.widget.client.ObservableProperty;
#end

#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin

import org.cggh.chassis.generic.widget.client.AsyncWidgetModel;
import org.cggh.chassis.generic.widget.client.ChassisWidget;

#if($melati.Object.Events.size() > 0) #begin

import org.cggh.chassis.generic.widget.client.WidgetEvent;
import org.cggh.chassis.generic.widget.client.WidgetEventHandler;

#end
import com.google.gwt.core.client.GWT;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiTemplate;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HTMLPanel;

#end 

#if($melati.Object.Properties.size() > 0) #begin

import com.google.gwt.xml.client.Element;
#end

#if($melati.Object.ExtendedFrom.equals("MultiWidget")) #begin
import org.cggh.chassis.generic.widget.client.MultiWidget;

#end 
#if($melati.Object.Events.size() > 0) #begin

import org.cggh.chassis.generic.widget.client.WidgetEventChannel;
#end

/**
 * BE SURE TO EDIT THE TEMPLATE NOT THE RENDERED RESULT
 *
 * DELETE_TO_MANUALLY_EDIT
 *
 * @author timp
 *
 */
public class $(melati.Object.Name)Widget 
	 
#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	extends DelegatingWidget<$(melati.Object.Name)WidgetModel, $(melati.Object.Name)WidgetRenderer> {
#end 
#if($melati.Object.ExtendedFrom.equals("MultiWidget")) #begin
	extends MultiWidget {
#end 
#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin
	extends ChassisWidget {
#end  

	private static final Log log = LogFactory.getLog($(melati.Object.Name)Widget.class);
	

#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin

	@UiTemplate("$(melati.Object.Name)Widget.ui.xml")
	interface $(melati.Object.Name)WidgetRendererUiBinder extends
			UiBinder<HTMLPanel, $(melati.Object.Name)Widget> {
	}
	private static $(melati.Object.Name)WidgetRendererUiBinder uiBinder = 
		GWT.create($(melati.Object.Name)WidgetRendererUiBinder.class);

	@UiField HTMLPanel mainPanel;
	@UiField HTMLPanel contentPanel;
	@UiField HTMLPanel pendingPanel;
	@UiField HTMLPanel errorPanel;
	@UiField FlowPanel errorMessage;

	@UiField FlowPanel $u.uncapitalised($melati.Object.Name)Panel;
	
#foreach $kid in $melati.Object.ChildWidgets #begin

    @UiField $(kid.Name)Widget $u.uncapitalised($kid.Name)WidgetUiField;

#end


	@Override
	protected void renderUI() {

		log.enter("renderUI");
		
		this.clear();
		this.add(uiBinder.createAndBindUi(this));
		errorPanel.setVisible(false);	
		

		log.leave();
	}


	@Override
	protected void bindUI() {
		super.bindUI();

#foreach $kid in $melati.Object.ChildWidgets #begin
  #foreach $event in $kid.Events #begin
		this.childWidgetEventHandlerRegistrations.add(
				$u.uncapitalised($event.Widget.Name)WidgetUiField.$u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel.addHandler(new WidgetEventHandler() {
			public void onEvent(WidgetEvent e) {
				log.enter("onEvent($(event.Widget.Name)$(event.Name))");
				$u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel.fireEvent(e);
				log.leave();
			}
		}));
  #end
#end
		
	}


#end

#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	private $(melati.Object.Name)WidgetController controller;
#end

#foreach $property in $melati.Object.Properties #begin

	public final ObservableProperty<$property.Type> $property.Name = new ObservableProperty<$property.Type>();

#end
	public final ObservableProperty<Status> status = new ObservableProperty<Status>();
	public final ObservableProperty<String> message = new ObservableProperty<String>();


#foreach $event in $melati.Object.Events #begin
	public final WidgetEventChannel $u.uncapitalised($event.Widget.Name)$(event.Name)EventChannel = new WidgetEventChannel(this);
#end



#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
#foreach $kid in $melati.Object.ChildWidgets #begin

	// public so as to be available to renderer 
	public $(kid.Name)Widget $u.uncapitalised($kid.Name)Widget;

#end

	@Override
	protected $(melati.Object.Name)WidgetModel createModel() {
		return new $(melati.Object.Name)WidgetModel();
	}

	public $(melati.Object.Name)WidgetModel getModel() {
		return model;
	}

	@Override
	protected $(melati.Object.Name)WidgetRenderer createRenderer() {
		return new $(melati.Object.Name)WidgetRenderer(this);
	}
#end	

#if($melati.Object.ExtendedFrom.equals("DelegatingWidget")) #begin
	// Using init() rather than constructor because reset() uses init().
	public void init() {
		
		super.init();
		

		this.controller = new $(melati.Object.Name)WidgetController(this, this.model);
		this.renderer.setController(controller);

	}
#end
	
	@Override
	public void refresh() {
		log.enter("refresh");
		
		// TODO refresh this

#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin
#foreach $kid in $melati.Object.ChildWidgets #begin

		$u.uncapitalised($kid.Name)WidgetUiField.refresh();

#end
#end
		log.leave();	
	}
	
	
	
#if($melati.Object.ExtendedFrom.equals("ChassisWidget")) #begin

    protected void syncUIWithStatus(Status status) {
		log.enter("syncUIWithStatus");		
		log.debug("status:" + status);
		
		if (status == null) {
			// nothing to do yet
		}
		else if (status instanceof AsyncWidgetModel.InitialStatus) {
			pendingPanel.setVisible(true);	
		}
		else if (status == ListStudiesWidgetModel.STATUS_RETRIEVE_STUDY_FEED_PENDING) {
			// still pending
		}			
		else if (status == ListStudiesWidgetModel.STATUS_READY_FOR_INTERACTION) {
			pendingPanel.setVisible(false);	
		}			
		else if (status instanceof AsyncWidgetModel.ReadyStatus) {
			pendingPanel.setVisible(false);	
		}			
		else if (status instanceof AsyncWidgetModel.ErrorStatus) {
			message.set("Error status given on asynchronous call.");
		}			
		else {
			message.set("Unhandled status:" + status);
		}
		
		log.leave();
	}
	
	protected void syncUIWithMessage(String message) {
		log.enter("syncUIWithMessage");

		if (message != null) {
			pendingPanel.setVisible(false);	
			contentPanel.setVisible(false);
			errorMessage.clear();
			errorMessage.add(new HTML(message));
			errorPanel.setVisible(true);
		}

		log.leave();
	}
	
#foreach $property in $melati.Object.Properties #begin
	
	protected void syncUIWith$u.capitalised($(property.Name))($(property.Type) $(property.Name)) {
		log.enter("syncUIWith$u.capitalised($(property.Name))");
		// TODO needs to be a method in an extension
		log.leave();
	}

#end

#end 

}
