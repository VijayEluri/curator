#set $u=$melati.getContextUtil("org.melati.poem.util.StringUtils")

package org.cggh.chassis.wwarn.ui.curator.client;

import org.cggh.chassis.generic.async.client.Deferred;
import org.cggh.chassis.generic.async.client.Function;
import org.cggh.chassis.generic.log.client.Log;
import org.cggh.chassis.generic.log.client.LogFactory;
import org.cggh.chassis.generic.miniatom.client.Atom;
import org.cggh.chassis.generic.widget.client.AsyncWidgetModel;
import org.cggh.chassis.generic.widget.client.ChassisWidget;
import org.cggh.chassis.generic.widget.client.ErrorEvent;

import org.cggh.chassis.wwarn.ui.common.client.Config;

import com.google.gwt.xml.client.Document;
import com.google.gwt.xml.client.Element;

/**
 * BE SURE TO EDIT THE TEMPLATE NOT THE RENDERED RESULT
 *
 * DELETE_TO_MANUALLY_EDIT
 *
 *
 * 
 *
 * @author timp
 *
 */
public class $(melati.Object.Name)WidgetController {
	
	
	private Log log = LogFactory.getLog($(melati.Object.Name)WidgetController.class);
	
	
	private $(melati.Object.Name)Widget owner;
	private $(melati.Object.Name)WidgetModel model;

	public $(melati.Object.Name)WidgetController($(melati.Object.Name)Widget owner, $(melati.Object.Name)WidgetModel model) {
		this.owner = owner;
		this.model = model;
	}

#foreach $kid in $melati.Object.Children #begin

  #if($kid.Table.Name.equals("widget")) #begin

	##private $(kid.Name)Widget $u.uncapitalised($kid.Name)Widget;

  #end #else #begin 
    #if($kid.Table.Name.equals("request")) #begin

	##	// Expected to be $kid.Method $kid.Url.Url

    #end #else #begin 
      #if($kid.Table.Name.equals("method")) #begin
			
	##public void $(kid.Name) { 
	##  // TODO Generated stub 
	##}
	
      #end #else #begin 
        #if($kid.Table.Name.equals("event")) #begin
					
        ##//private $(kid.Name)Event $u.uncapitalised($kid.Name)Event;
	
        #end #else #begin 
          #if($kid.Table.Name.equals("property")) #begin
          

#if($kid.Type.equals("Document")) #begin
			
	public Deferred<$kid.Type> retrieve$u.capitalised($(kid.Name))() {
		log.enter("retrieve$u.capitalised($(kid.Name))");
		
		model.status.set(AsyncWidgetModel.STATUS_ASYNC_REQUEST_PENDING);
		
		String queryServiceUrl = Config.get(Config.$(kid.Urlkey));

		log.debug("QUERY_$(kid.Name.toUpperCase())_URL:"+queryServiceUrl);
		
		Deferred<Document> deferredDoc = Atom.getFeed(queryServiceUrl);
		
		// Add a call-back and error-back for the asynchronous feed.
		deferredDoc.addCallback(new Retrieve$u.capitalised($(kid.Name))Callback());
		deferredDoc.addErrback(new DefaultErrback());
		
		log.leave();
		return deferredDoc;
	}
	
	private class Retrieve$u.capitalised($(kid.Name))Callback implements Function<Document, Document> {

		@Override
		public Document apply(Document in) {
			log.debug("Retrieve$u.capitalised($(kid.Name))Callback.apply setting model status to " + AsyncWidgetModel.STATUS_READY);
			model.status.set(AsyncWidgetModel.STATUS_READY);
			model.$(kid.Name).set(in);
			return in;
		}

	}
	
	
	public Deferred<ChassisWidget> refreshAndCallback() {
		log.enter("refreshAndCallback");
		
		final Deferred<ChassisWidget> deferredOwner = new Deferred<ChassisWidget>();

			
		Deferred<Document> chain = retrieve$u.capitalised($(kid.Name))();
			
		// handle errors
		chain.addErrback(new DefaultErrback());
			
		// finally callback with owner, in any case
		chain.addBoth(new Function<Object, Object>() {

			public Object apply(Object in) {
				deferredOwner.callback(owner);
				return in;
			}
				
		});

		log.leave();
		return deferredOwner;
		
	}

#end #else #begin 
#if($kid.Type.equals("Element")) #begin
	
	public Deferred<ChassisWidget> refreshAndCallback() {
		log.enter("refreshAndCallback");
		
		final Deferred<ChassisWidget> deferredOwner = new Deferred<ChassisWidget>();

			
		if (model.studyUrl.get() != null) {
			Deferred<Element> chain = retrieve$u.capitalised($(kid.Name))();
			
			chain.addCallback(new Retrieve$u.capitalised($(kid.Name))Callback());
			
			// handle errors
			chain.addErrback(new DefaultErrback());
			
			// finally callback with owner, in any case
			chain.addBoth(new Function<Object, Object>() {

				public Object apply(Object in) {
					deferredOwner.callback(owner);
					return in;
				}
				
			});

		}

		log.leave();
		return deferredOwner;
		
	}

	public Deferred<Element> retrieve$u.capitalised($(kid.Name))() {
		log.enter("retrieve$u.capitalised($(kid.Name))");
		
		model.status.set(AsyncWidgetModel.STATUS_ASYNC_REQUEST_PENDING);
		
		Deferred<Element> deferredElement;
		log.debug("model.StudyUrl"+ model.studyUrl.get());
		if (!model.studyUrl.isNull()) {
			
			deferredElement = Atom.getEntry(model.studyUrl.get()).adapt(new Function<Document, Element>() {

				public Element apply(Document in) {
					log.debug("retrieve$(u.capitalised($(kid.Name))).apply returning " + in.getDocumentElement());
					return in.getDocumentElement();
				}
				
			});
			
		}
		else {
			deferredElement = new Deferred<Element>();
			deferredElement.callback(null);
		}
		
		// Add a call-back and error-back for the asynchronous feed.
		deferredElement.addCallback(new Retrieve$u.capitalised($(kid.Name))Callback());
		deferredElement.addErrback(new DefaultErrback());
		
		log.leave();
		return deferredElement;
	}

	
	private class Retrieve$u.capitalised($(kid.Name))Callback implements Function<Element,Element> {

		@Override
		public Element apply(Element $(kid.Name)Element) {
			log.enter("apply<$(kid.Name)Element>");
			if ($(kid.Name)Element != null) {

				model.$(kid.Name).set($(kid.Name)Element);
				// we have one
				log.debug("Retrieve$u.capitalised($(kid.Name))Callback.apply not null");
				
			}
			
			else {
				
				log.debug("Retrieve$u.capitalised($(kid.Name))Callback.apply null");

			}
			
			log.leave();
			return $(kid.Name)Element;
		}

	}

	
#end #else #begin
##
##
##	public Deferred<Document> retrieve$u.capitalised($(kid.Name))() {
##		log.enter("retrieve$u.capitalised($(kid.Name))");
##		
##		log.leave();
##		return null;
##	}
##
##	private class Retrieve$u.capitalised($(kid.Name))Callback implements Function<Deferred<Document>,$kid.Type> {
##
##		public $kid.Type apply(Deferred<Document> $u.uncapitalised($(kid.Name))Feed) {
##
##			return null;
##		}
##
##	}
##
	
#end
#end
	
	

          #end #else #begin 
	//eeek $kid 
          #end
        #end
	  #end 
	#end 	
  #end 
#end

	
	private class DefaultErrback implements Function<Throwable, Throwable> {

		public Throwable apply(Throwable in) {
			log.error("unexpected error", in);
			model.status.set(AsyncWidgetModel.STATUS_ERROR);

			// TODO Do we want stack trace?
			// TODO Should we be getting the message from ErrorEvent ?
		    //StringWriter sw = new StringWriter();
		    //PrintWriter pw = new PrintWriter(sw);
		    //in.printStackTrace(pw);
			//model.message.set(in.getMessage() +
			//	"------\r\n" + sw.toString() + "------\r\n");

			model.message.set(in.getMessage());
			owner.fireEvent(new ErrorEvent(in));
			return in;
		}
		
	}
	

	
	

}
